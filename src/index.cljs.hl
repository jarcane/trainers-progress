(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :refer [reload-all]]
   [tailrecursion.hoplon.util :refer [capitalize-name]]
   [mons.table :refer [mons]]))

(reload-all)

;; Helper functions

; totals a string's character values
(defn tot-str [s]
  (apply + (map #(.charCodeAt % 0) s)))

; Pushes an item to a list and returns only the first x of the list
(defn conslim [lst x]
  (let [nlst (cons x lst)]
    (if (> (count nlst) 30)
      (take 30 nlst)
      nlst)))

; Given a string containing a Name, returns a map containing that name's possible stats
(defn get-stats [s lvl]
  (let [atk (+ 4 (mod (hash s) 16))
        def (+ 3 (mod (hash (reverse s)) 17))
        hp (quot (tot-str s) (+ atk def))
        type (case (mod (hash s) 5)
               0 "Wood"
               1 "Earth"
               2 "Water"
               3 "Fire"
               4 "Metal")]
    {:name (capitalize-name s)
     :lvl lvl
     :atk (+ atk (quot lvl (inc (mod (hash s) 4))))
     :def (+ def (quot lvl (inc (mod (hash (reverse s)) 5))))
     :hp  (int (+ hp (* lvl (inc (/ (inc (mod (hash s) 9)) 10)))))
     :type type}))

;; Initial trainer state
(defc tname "")
(defc tparty [[(rand-nth mons) (inc (rand-int 10))]])
(defc journal [(str "The professor gave me a " (capitalize-name (first (first @tparty))) "! I'm off to adventure!")])
(defc battling? false)

(defc= ptparty (map #(apply get-stats %) tparty))
(defc= ready (and (not (empty? tname))
                  (not (empty? tparty))))

;; Game Logic
(defn start-battle []
  ;;(do
    ;;(swap! battling? not)
    ;;(loop [player (get-stats (rand-nth tparty))
      ;;     enemy (get-stats (rand-nth mons))]
  ;;))
  (swap! journal conslim "Fought a thing!")
  )

(defn rnd-event []
  (swap! journal conslim "Did a thing!"))

(defn gym []
  (swap! journal conslim "Fought a lot of things!" ))

;; Main Game Loop
(with-init!
  (with-interval 1000
    (when ready
      (case (rand-int 4)
        (0 1) (start-battle)
        (2) (rnd-event)
        (3) (gym)))))

;; Page template
(html
 (head
  (title "A Trainer's Progress"))
 
  (body
   (h1 "A Trainer's Progress")

   (h2 "Trainer")
   (div :toggle (cell= (not (empty? tname)))
        (text "Name: ~{tname}"))

   ; If our trainer's name isn't set yet, we show an input form
   (div :toggle (cell= (empty? tname))
        (text "What's your trainer's name?")
        (form
         (input :id "name"
                :type "text"
                :value "")
         (input :type "submit"
                :value "To Adventure!"
                :on-click #(reset! tname (val-id "name")))))

   ;; Now it's time to pick a party!
   (div :toggle (cell= ready)
        (h2 "Party")
        (ul
         (loop-tpl :bindings [mon ptparty]
                   (li (b (text "~{(:name mon)}, "))
                       (i (text "Lvl ~{(:lvl mon)} ~{(:type mon)} Animon"))
                       (text " - ATK ~{(:atk mon)}, DEF ~{(:def mon)}, HP ~{(:hp mon)}")))))

   ;; The ongoing adventure log
   (div :toggle (cell= ready)
        (h2 "Journal")
        (ul (loop-tpl :bindings [x journal]
                      (li x))))
   ))

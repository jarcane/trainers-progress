(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :refer [reload-all]]
   [tailrecursion.hoplon.util :refer [capitalize-name]]
   [mons.table :refer [mons]]))

(reload-all)

;; Initial trainer state
(defc tname "")
(defc tparty [(rand-nth mons)])
(defc= ready (and (not (empty? tname))
                  (not (empty? tparty))))

;; Helper functions

(defn tot-str [s]
  (apply + (map #(.charCodeAt % 0) s)))
(defn avg-str [s]
  (quot (tot-str s)
        (count s)))

;; Name -> Map {:atk Number :def Number :hp Number :type String}
; Given a string containing a Name, returns a map containing that name's possible stats
(defn get-stats [s]
  (let [avg (- (avg-str s) 96)
        fc (- (.charCodeAt s 0) 96)
        sc (- (.charCodeAt s 1) 96)
        atk (+ 4 (mod (hash s) 16))
        def (+ 3 (mod (hash (reverse s)) 17))
        hp (quot (tot-str s) (+ atk def))
        type (case (mod (hash s) 6)
               0 "Grazer"
               1 "Forager"
               2 "Scavenger"
               3 "Hunter"
               4 "Predator"
               "Legendary")]
    {:atk atk
     :def def
     :hp  hp
     :type type}))

;; Page template
(html
 (head
  (title "A Trainer's Progress"))
 
  (body
   (h1 "A Trainer's Progress")

   (h2 "Trainer")
   (div :toggle (cell= (not (empty? tname)))
        (text "Name: ~{tname}"))

   ; If our trainer's name isn't set yet, we show an input form
   (div :toggle (cell= (empty? tname))
        (text "What's your trainer's name?")
        (form
         (input :id "name"
                :type "text"
                :value "")
         (input :type "submit"
                :value "To Adventure!"
                :on-click #(reset! tname (val-id "name")))))

   ;; Now it's time to pick a party!
   (h2 "Party")
   (text "~{(capitalize-name (first tparty))} - ~{(get-stats (first tparty))}")
  
   ))

(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :refer [reload-all]]
   [tailrecursion.hoplon.util :refer [capitalize-name]]
   [clojure.string :refer [lower-case]]
   [mons.table :refer [mons events]]))

(reload-all)

;; Helper functions

; totals a string's character values
(defn tot-str [s]
  (apply + (map #(.charCodeAt % 0) s)))

; Pushes an item to a list and returns only the first x of the list
(defn conslim [limit lst x]
  (let [nlst (cons x lst)]
    (if (> (count nlst) limit)
      (take limit nlst)
      nlst)))
(def cons30 (partial conslim 30))
(def cons5 (partial conslim 5))
(def cons6 (partial conslim 6))

; Given a string containing a Name, returns a map containing that name's possible stats
(defn get-stats [s lvl]
  (let [atk (+ 4 (mod (hash s) 16))
        def (+ 3 (mod (hash (reverse s)) 17))
        hp (quot (tot-str s) (+ atk def))
        hplvld (int (+ hp (* lvl (inc (/ (inc (mod (hash s) 9)) 10)))))
        type (case (mod (hash s) 5)
               0 "Wood"
               1 "Earth"
               2 "Water"
               3 "Fire"
               4 "Metal")]
    {:name (capitalize-name s)
     :lvl lvl
     :atk (+ atk (quot lvl (inc (mod (hash s) 4))))
     :def (+ def (quot lvl (inc (mod (hash (reverse s)) 5))))
     :hp  hplvld
     :currhp hplvld
     :type type}))

(defn get-damage [attr defr]
  (int (+ (/ (:lvl attr) 5)
          (/ (:atk attr) (:def defr))
          (* (:lvl attr) (+ .5 (rand)))
          1)))

(defn hurt-it [vic dam]
  (assoc vic :currhp (- (:currhp vic) dam)))

;; Initial trainer state
(defc tname "")
(defc tparty [(get-stats (rand-nth mons) (inc (rand-int 10)))])
(defc journal [(str "The professor gave me a " (capitalize-name (first (first @tparty))) "! I'm off to adventure!")])
(defc anidex #{(:name (first @tparty))})
(defc battling? false)
(defc player {})
(defc enemy {})
(defc battlelog '())
(defc badges 0)
(defc beat-final false)

(defc= avg-lvl (quot (reduce + 0 (map #(:lvl %) tparty))
                     (count tparty)))
(defc= ready (not (empty? tname)))
(defc= master (if (and (= badges 8)
                       beat-final)
                ". Master Trainer!"
                ""))

;; Game Logic
(defn start-battle []
  (reset! player (first @tparty))
  (reset! enemy (get-stats (rand-nth mons) (int (* @avg-lvl (+ .8 (rand .4))))))
  (reset! battling? true))

(defn continue-battle []
  (cond
    (<= (:currhp @player) 0)
    (do
      (swap! journal cons30 "Oh no! I was defeated! I blacked out!")
      (swap! journal cons30 "Woke up at the Anihospital")
      (reset! battling? false)
      (reset! battlelog '()))
    (<= (:currhp @enemy) 0)
    (do
      (swap! journal cons30 (str "I defeated a " (:name @enemy) "!"))
      (swap! anidex conj (:name @enemy))
      (reset! battlelog '())
      (reset! battling? false))
    (< 0 (:currhp @enemy) (int (* (:hp @enemy) .1)))
    (do
      (swap! journal cons30 (str "I caught a " (:name @enemy) "!"))
      (swap! anidex conj (:name @enemy))
      (swap! tparty cons6 (assoc @enemy :currhp (:hp @enemy)))
      (reset! battlelog '())
      (reset! battling? false))
    :else (let [damage (get-damage @player @enemy)
                edamage (get-damage @enemy @player)]
            (swap! battlelog cons5 (str "Did " damage " damage to " (:name @enemy)))
            (swap! enemy hurt-it damage)
            (swap! battlelog cons5 (str (:name @enemy) " hit for " edamage))
            (swap! player hurt-it edamage)
            )
    ))

(defn rnd-event []
  (swap! journal cons30 (rand-nth events)))

(defn gym []
  (swap! journal cons30 "Fought a lot of things!"))

;; Main Game Loop
(with-init!
  (with-interval 1000
    (cond
      @battling? (continue-battle)
      (and @ready (not @battling?)) (case (rand-int 4)
                                      (0 1) (start-battle)
                                      (2) (rnd-event)
                                      (3) (gym))
      ;:else (swap! journal cons30 "Something Strange Happened")
      )))

;; Page template
(html
 (head
  (title "A Trainer's Progress")
  (link :href "http://maxcdn.bootstrapcdn.com/bootswatch/3.3.4/journal/bootstrap.min.css"
        :rel "stylesheet"))
 
  (body
   (h1 "A Trainer's Progress")

   (h2 "Trainer")
   (div :toggle (cell= (not (empty? tname)))
        (text "Name: ~{tname}")
        (br)
        (text "Anidex: ~{(count anidex)} out of ~{(count mons)}")
        (br)
        (text "Badges: ~{badges} ~{master}")
        (br)
        (text "ID #: ~{(hash tname)}"))

   ; If our trainer's name isn't set yet, we show an input form
   (div :toggle (cell= (empty? tname))
        (text "What's your trainer's name?")
        (form
         (input :id "name"
                :type "text"
                :value "")
         (input :type "submit"
                :value "To Adventure!"
                :on-click #(reset! tname (val-id "name")))))

   ;; Now it's time to pick a party!
   (div :toggle (cell= ready)
        (h2 "Party")
        (text "Party Level: ~{avg-lvl}")
        (ul
         (loop-tpl :bindings [mon tparty]
                   (li (b (text "~{(:name mon)}, "))
                       (i (text "Lvl ~{(:lvl mon)} ~{(:type mon)} Animon"))
                       (text " - ATK ~{(:atk mon)}, DEF ~{(:def mon)}, HP ~{(:hp mon)}")))))

   ;; Battles Happen here
   (div :toggle (cell= battling?)
        (h2 "Battle!")
        (div :align "right"
             (text "~{(:name enemy)} - Lvl. ~{(:lvl enemy)}")
             (br)
             (text "~{(:currhp enemy)}/~{(:hp enemy)}")
             )
        (div :align "center" (text "VS."))
        (div :align "left"
             (text "~{(:name player)} - Lvl. ~{(:lvl player)}")
             (br)
             (text "~{(:currhp player)}/~{(:hp player)}")
             )
        (ul (loop-tpl :bindings [log battlelog]
                  (li log)))
        )

   ;; The ongoing adventure log
   (div :toggle (cell= ready)
        (h2 "Journal")
        (ul (loop-tpl :bindings [x journal]
                      (li x))))
   ))

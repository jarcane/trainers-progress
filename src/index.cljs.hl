(page "index.html"
  (:require
   [tailrecursion.hoplon.reload :refer [reload-all]]
   [tailrecursion.hoplon.util :refer [capitalize-name]]
   [clojure.string :refer [lower-case]]
   [mons.table :refer [mons events]]))

(reload-all)

;; Helper functions

; totals a string's character values
(defn tot-str [s]
  (apply + (map #(.charCodeAt % 0) s)))

; Pushes an item to a list and returns only the first x of the list
(defn conslim [limit lst x]
  (let [nlst (cons x lst)]
    (if (> (count nlst) limit)
      (take limit nlst)
      nlst)))
(def cons30 (partial conslim 30))
(def cons5 (partial conslim 5))
(def cons6 (partial conslim 6))

; Given a string containing a Name, returns a map containing that name's possible stats
(defn get-stats [s lvl]
  (let [atk (+ 4 (mod (hash s) 16))
        def (+ 3 (mod (hash (reverse s)) 17))
        hp (quot (tot-str s) (+ atk def))
        hplvld (int (+ hp (* lvl (inc (/ (inc (mod (hash s) 9)) 10)))))
        type (case (mod (hash s) 5)
               0 "Wood"
               1 "Earth"
               2 "Water"
               3 "Fire"
               4 "Metal")]
    {:name (capitalize-name s)
     :lvl lvl
     :atk (+ atk (quot lvl (inc (mod (hash s) 4))))
     :def (+ def (quot lvl (inc (mod (hash (reverse s)) 5))))
     :hp  hplvld
     :currhp hplvld
     :type type
     :kills 0}))

(defn level-up [mon]
  (if (>= (:kills mon) (:lvl mon))
    (get-stats (lower-case (:name mon)) (inc (:lvl mon)))
    (assoc mon :kills (inc (:kills mon)))))

(defn type-bonus [attk defr]
  (let [pair? (fn [type1 type2] (and (= type1 (:type attk))
                                     (= type2 (:type defr))))]
    (cond
      (or (pair? "Wood" "Earth")
          (pair? "Earth" "Water")
          (pair? "Water" "Fire")
          (pair? "Fire" "Metal")
          (pair? "Metal" "Wood"))
      1.5
      (or (pair? "Wood" "Fire")
          (pair? "Fire" "Earth")
          (pair? "Earth" "Metal")
          (pair? "Metal" "Water")
          (pair? "Water" "Wood"))
      0.75
      :else 1)))

(defn get-damage [attr defr plyr?]
  (int (* (+ (/ (:atk attr) (:def defr))
             (* (:lvl attr) (+ .5 (rand)))
             (if plyr? (/ (:lvl attr) 5) 1))
          (type-bonus attr defr))))

(defn hurt-it [vic dam]
  (assoc vic :currhp (- (:currhp vic) dam)))

;; Initial trainer state
(defc tname "")
(defc tparty [(get-stats (rand-nth mons) 5)])
(defc journal [(str "The professor gave me a " (:name (first @tparty)) "! I'm off to adventure!")])
(defc anidex #{(:name (first @tparty))})
(defc battling? false)
(defc player {})
(defc enemy {})
(defc battlelog '())
(defc badges 0)
(defc beat-final false)

(defc= avg-lvl (quot (reduce + 0 (map #(:lvl %) tparty))
                     (count tparty)))
(defc= ready (not (empty? tname)))
(defc= master (if (and (= badges 8)
                       beat-final)
                "- Master Trainer!"
                ""))

;; Game Logic
(defn start-battle []
  (reset! player (first @tparty))
  (reset! enemy (get-stats (rand-nth mons) (max 1 (+ @avg-lvl (- 3 (rand-int 7))))))
  (reset! battling? true)
  (swap! battlelog cons5 (str "Sent out " (:name @player))))

(defn continue-battle []
  (cond
    (<= (:currhp @player) 0)
    (do
      (swap! battlelog cons5 (str "Oh no! " (:name @player) " was killed!"))
      (if (empty? (rest @tparty))
        (do
          (swap! journal cons30 (str "Fled the " (:name @enemy) ", and retreated to the Anihospital."))
          (reset! battlelog '())
          (reset! battling? false))
        (do
          (swap! tparty rest)
          (reset! player (first @tparty))
          (swap! battlelog cons5 (str "Sent out " (:name @player))))))
    (<= (:currhp @enemy) 0)
    (do
      (swap! journal cons30 (str "I defeated a " (:name @enemy) "!"))
      (swap! anidex conj (:name @enemy))
      (swap! tparty #(cons (level-up (first %)) (rest %)))
      (reset! battlelog '())
      (reset! battling? false))
    (< 0 (:currhp @enemy) (int (* (:hp @enemy) .1)))
    (do
      (swap! journal cons30 (str "I caught a " (:name @enemy) "!"))
      (swap! anidex conj (:name @enemy))
      (swap! tparty cons6 (assoc @enemy :currhp (:hp @enemy)))
      (reset! battlelog '())
      (reset! battling? false))
    :else (let [damage (get-damage @player @enemy true)
                edamage (get-damage @enemy @player false)]
            (swap! battlelog cons5 (str "Did " damage " damage to " (:name @enemy)))
            (swap! enemy hurt-it damage)
            (swap! battlelog cons5 (str (:name @enemy) " hit for " edamage))
            (swap! player hurt-it edamage))
    ))

(defn rnd-event []
  (swap! journal cons30 (rand-nth events)))

(defn gym []
  (cond
    (< @badges 8)
    (if (> @avg-lvl (* (inc @badges) 10))
      (do
        (swap! badges inc)
        (swap! journal cons30 "Passed my gym test and got a badge!"))
      (swap! journal cons30 "Tried to take my gym test and failed!"))
    (and (= @badges 8)
         (not @beat-final))
    (if (> @avg-lvl 100)
      (do
        (reset! beat-final true)
        (swap! journal cons30 "I passed my final trainer's exam!"))
      (swap! journal cons30 "I failed my final. Back to studying I guess."))
    :else (swap! journal cons30 "Checked out the local gym for some practice."))
  )

;; Main Game Loop
(with-init!
  (with-interval 10
    (cond
     @battling? (continue-battle)
     (and @ready
          (not @battling?))
     (case (rand-int 7)
       (0 1 2) (start-battle)
       (3 4) (rnd-event)
       (5) (gym)
       (6) (when (not (= 1 (count @tparty)))
             (swap! journal cons30 "Rearranged my party")
             (swap! tparty shuffle))))))

;; Page template
(html
 (head
  (title "A Trainer's Progress")
  (link :href "http://maxcdn.bootstrapcdn.com/bootswatch/3.3.4/journal/bootstrap.min.css"
        :rel "stylesheet"))

  (body
   (h1 "A Trainer's Progress")

   (h2 "Trainer")
   (div :toggle (cell= (not (empty? tname)))
        (text "Name: ~{tname}")
        (br)
        (text "Anidex: ~{(count anidex)} out of ~{(count mons)}")
        (br)
        (text "Badges: ~{badges} ~{master}")
        (br)
        (text "ID #: ~{(mod (hash tname) 1000000)}"))

   ; If our trainer's name isn't set yet, we show an input form
   (div :toggle (cell= (empty? tname))
        (text "What's your trainer's name?")
        (form
         (input :id "name"
                :type "text"
                :value "")
         (input :type "submit"
                :value "To Adventure!"
                :on-click #(reset! tname (val-id "name")))))

   ;; Now it's time to pick a party!
   (div :toggle (cell= ready)
        (h2 "Party")
        (text "Party Level: ~{avg-lvl}")
        (ul
         (loop-tpl :bindings [mon tparty]
                   (li (b (text "~{(:name mon)}, "))
                       (i (text "Lvl ~{(:lvl mon)} ~{(:type mon)} Animon"))
                       (text " - ATK ~{(:atk mon)}, DEF ~{(:def mon)}, HP ~{(:hp mon)}")))))

   ;; Battles Happen here
   (div :toggle (cell= battling?)
        (h2 "Battle!")
        (div :align "right"
             (text "~{(:name enemy)} - Lvl. ~{(:lvl enemy)}")
             (br)
             (text "~{(:currhp enemy)}/~{(:hp enemy)}")
             )
        (div :align "center" (text "VS."))
        (div :align "left"
             (text "~{(:name player)} - Lvl. ~{(:lvl player)}")
             (br)
             (text "~{(:currhp player)}/~{(:hp player)}")
             )
        (ul (loop-tpl :bindings [log battlelog]
                  (li log)))
        )

   ;; The ongoing adventure log
   (div :toggle (cell= ready)
        (h2 "Journal")
        (ul (loop-tpl :bindings [x journal]
                      (li x))))
   ))
